{"name": "200 OK при запросе на принятие 1 заказа курьером с валидным заказом и курьером.", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидалось: 200 OK, получено 404 {\"code\":404,\"message\":\"Заказа с таким id не существует\"}\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <test_accept_order.TestAcceptOrder object at 0x00000233CC3AEC10>, courier_id = 465005, order_confirmed = 882712\n\n    @allure.title('200 OK при запросе на принятие 1 заказа курьером с валидным заказом и курьером.')\n    @allure.description('Создаем курьера фикстурой courier_id и получаем его ID,'\n                        ' создаем заказ фикстурой order_confirmed, Фикстура также проверяет, что заказ создан и успешно находится в системе по track номеру.'\n                        ' Отправлям PUT запрос на ручку /api/v1/orders/accept/OrderID?courierId=CourierID.'\n                        ' Проверяем, что ответ 200 ОК и тело ответа {\"ok\":true}.'\n                        ' Курьер удаляется из системы фикстурой courier_id.')\n    def test_accept_order_valid_order_and_courier_success_200(self, courier_id, order_confirmed):\n        path = f'{config.ACCEPT_ORDER_PATH}{order_confirmed}?courierId={courier_id}'\n        response = Request.put_no_payload(path)\n        expected_response_body = {\"ok\": True}\n>       assert response.status_code == 200, f'Ожидалось: 200 OK, получено {response.status_code} {response.text}'\nE       AssertionError: Ожидалось: 200 OK, получено 404 {\"code\":404,\"message\":\"Заказа с таким id не существует\"}\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntests\\test_accept_order.py:19: AssertionError"}, "description": "Создаем курьера фикстурой courier_id и получаем его ID, создаем заказ фикстурой order_confirmed, Фикстура также проверяет, что заказ создан и успешно находится в системе по track номеру. Отправлям PUT запрос на ручку /api/v1/orders/accept/OrderID?courierId=CourierID. Проверяем, что ответ 200 ОК и тело ответа {\"ok\":true}. Курьер удаляется из системы фикстурой courier_id.", "steps": [{"name": "PUT request без payload", "status": "passed", "parameters": [{"name": "path", "value": "'/api/v1/orders/accept/882712?courierId=465005'"}], "start": 1738945772236, "stop": 1738945772289}], "attachments": [{"name": "stdout", "source": "e6ffcac4-7299-4455-bbd2-4ec43703f720-attachment.txt", "type": "text/plain"}], "start": 1738945772236, "stop": 1738945772291, "uuid": "b77510b6-795d-4c67-aaeb-eef5f7f2576f", "historyId": "637015851724e72b207d400ca7e51f41", "testCaseId": "637015851724e72b207d400ca7e51f41", "fullName": "tests.test_accept_order.TestAcceptOrder#test_accept_order_valid_order_and_courier_success_200", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('class_courier')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_accept_order"}, {"name": "subSuite", "value": "TestAcceptOrder"}, {"name": "host", "value": "k-julls"}, {"name": "thread", "value": "14568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_accept_order"}]}